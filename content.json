{"meta":{"title":"新生代农民工的博客","subtitle":"喜欢黑科技","description":"记录成长，总结工作","author":"新生代农民工","url":"https://caohanchao.github.io","root":"/"},"posts":[{"title":"简单了解 iOS CVPixelBuffer（中）","date":"2022-02-27T15:21:25.000Z","path":"2022/02/27/简单了解-iOS-CVPixelBuffer（中）/","permalink":"https://caohanchao.github.io/2022/02/27/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-iOS-CVPixelBuffer%EF%BC%88%E4%B8%AD%EF%BC%89/","excerpt":"前言：在「简单了解 iOS CVPixelBuffer （上）」)中，我们了解了CVPixelBuffer如何创建、修改、以及检查CVPixelBuffer相关的参数。在上篇文末我们有讲到在这篇文章中，我们将了解颜色空间RGB和YUV的区别以及相关的背景知识，然后回过头来再看CVPixelBuffer中的kCVPixelFormatType相关的类型。 相信大家对于RGB都不陌生吧，那么YUV大家是否了解呢，它为我们做了些什么？ 在开篇我先提出一个问题：为什么要使用YUV呢？ 这个问题在我们了解了颜色空间之后，相信大家心中就已经有了答案。接下来开始我们的正文。 颜色空间","categories":[],"tags":[]},{"title":"简单了解 iOS CVPixelBuffer (上)","date":"2022-02-27T15:13:48.000Z","path":"2022/02/27/简单了解-iOS-CVPixelBuffer（上）/","permalink":"https://caohanchao.github.io/2022/02/27/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3-iOS-CVPixelBuffer%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"前言：在iOS中，我们会常常看到 CVPixelBufferRef 这个类型，最常见到的场景是在Camera 采集的时候，返回的数据中有一个CMSampleBufferRef，而每个CMSampleBufferRef则包含一个 CVPixelBufferRef，在视频硬解码的返回数据里也是一个 CVPixelBufferRef（里面包含了所有的压缩的图片信息）。在了解了CVPixelBufferRef之后，我们将能够掌握并且运用CVPixelBufferRef的使用； 本篇我们主要熟悉下CVPixelBuffer的使用； CVPixelBuffer 简介CVPixelBuffer：核心视频像素缓冲区是在主存储器中保存像素的图像缓冲区。生成帧、压缩或解压缩视频或使用 Core Image 的应用程序都可以使用 CVPixelBuffer。","categories":[],"tags":[]},{"title":"CocoaPods中podsepc文件设置详情","date":"2022-02-27T15:10:49.000Z","path":"2022/02/27/CocoaPods中podsepc文件设置详情/","permalink":"https://caohanchao.github.io/2022/02/27/CocoaPods%E4%B8%ADpodsepc%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E8%AF%A6%E6%83%85/","excerpt":"","categories":[],"tags":[]},{"title":"链接器到底干了些什么？","date":"2022-02-25T16:31:42.000Z","path":"2022/02/26/链接器到底干了些什么？/","permalink":"https://caohanchao.github.io/2022/02/26/%E9%93%BE%E6%8E%A5%E5%99%A8%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"前言我们在前文「了解 Mach-O文件」中，有提到过编译器会将文件编译，然后生成Mach—O文件，而程序是不会执行这么多的Mach—O文件，所以链接器会把这些Mach—O文件合并成一个。 链接器干了什么？iOS系统的可执行文件不就是 Mach-O文件吗，为什么还需要合并Mach- O文件呢？可能有同学会有疑惑吧🤔，是这样的，在我们的项目文件中定义了很多函数和变量，而这些函数和变量和其他文件有可能是相互依赖的，如果没有将这些函数和变量绑定关联起来的话，那么单个 Mach-O文件是无法正常运行的，因为，如果运行时碰到调用在其他文件中实现的函数的情况时，就会找不到这个调用函数的地址，从而无法继续执行。 链接器在链接目标文件的过程中，会创建一个符号表（Symbol Table），用来把我们定义的符号（链接中，我们将函数和变量统称为符号）和未定义的符号记录在其中。","categories":[],"tags":[{"name":"原理篇","slug":"原理篇","permalink":"https://caohanchao.github.io/tags/%E5%8E%9F%E7%90%86%E7%AF%87/"}]},{"title":"了解 Mach-O文件","date":"2022-02-25T16:03:23.000Z","path":"2022/02/26/了解-Mach-O文件/","permalink":"https://caohanchao.github.io/2022/02/26/%E4%BA%86%E8%A7%A3-Mach-O%E6%96%87%E4%BB%B6/","excerpt":"Mach-O文件想要一个应用程序运行起来，那么它的可执行文件格式一定要被操作系统所理解。在Windows系统的可执行文件是PE，而在OS X和iOS 中的可执行文件是Mach-O。 那么Mach-O是怎么生成的呢？苹果公司目前使用的编译器是LLVM，在程序编译时，编译器会对每个文件进行编译，然后生成Mach-O文件，而后链接器会将项目中的多个 Mach-O 文件合并成一个，最终的这个就是我们的可执行Mach-O文件. 那么Mach-O 文件里面有哪些内容呢？其实主要还是数据和代码，其中数据是一些初始值的定义，代码就是一些是函数的定义。下面我们一起了解下Mach-O文件。 Mach-O文件简介","categories":[],"tags":[{"name":"原理篇","slug":"原理篇","permalink":"https://caohanchao.github.io/tags/%E5%8E%9F%E7%90%86%E7%AF%87/"}]},{"title":"深入理解 iOS RunLoop","date":"2022-02-20T14:09:33.000Z","path":"2022/02/20/深入理解-iOS-RunLoop/","permalink":"https://caohanchao.github.io/2022/02/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-iOS-RunLoop/","excerpt":"RunLoop 是iOS中重要的一个概念，在 iOS 里它是由 CFRunLoop 实现。本章将从源码的方面梳理下RunLoop相关的概念、结构、原理。 浅谈RunLoopRunLoop概念：一般来讲，一个线程在执行任务完成后，就会结束。但是在我们的应用程序中不会直接结束，而是会在线程中构建一个消息循环机制。当有事件要去处理时保活线程，当没有事件要处理时让线程进入休眠，这个消息循环的机制就是RunLoop。 RunLoop和线程的关系：","categories":[],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://caohanchao.github.io/tags/Objective-C/"}]},{"title":"深入理解 iOS Runtime","date":"2022-02-19T12:53:06.000Z","path":"2022/02/19/深入理解-iOS-Runtime/","permalink":"https://caohanchao.github.io/2022/02/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-iOS-Runtime/","excerpt":"了解Runtime有助于我们理解Objective-C运行时系统的工作原理以及如何利用它。本章将介绍NSObject类以及Objective-C程序如何与运行时系统进行交互，如何在运行时查找对象的信息，如何将消息转发给其他对象。 Runtime简介Runtime 又称运行时，是iOS系统的核心，它是一套底层的C语言API。它会将一些工作放在代码运行时才处理而并非编译时，所以有很多类和成员变量在我们编译时是不知道的，而在运行时，我们所编写的代码会转换成完整的确定的代码运行。 运行时交互在Objective-C中与运行时系统有三个层次的交互：","categories":[],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://caohanchao.github.io/tags/Objective-C/"}]},{"title":"如何使用CocoaPods制作私有库","date":"2022-02-19T06:11:44.000Z","path":"2022/02/19/如何使用CocoaPods制作私有库/","permalink":"https://caohanchao.github.io/2022/02/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8CocoaPods%E5%88%B6%E4%BD%9C%E7%A7%81%E6%9C%89%E5%BA%93/","excerpt":"前言在前面的章节中有介绍过CocoaPods的使用： CocoaPods公有库以及私有库的区别 制作Framework以及上传至CocoaPods库 此篇文章会着重介绍下制作过程以及记录过程遇到的一些问题和解决办法。","categories":[],"tags":[{"name":"CocoaPods","slug":"CocoaPods","permalink":"https://caohanchao.github.io/tags/CocoaPods/"}]},{"title":"iOS 组件化方案","date":"2022-02-18T16:21:49.000Z","path":"2022/02/19/iOS-组件化方案/","permalink":"https://caohanchao.github.io/2022/02/19/iOS-%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88/","excerpt":"前言现在很多公司在业务扩张到一定程度或者商业模式跑通之后就会考虑到组件化方案，而组件化方案目前主流的做法就是以下三种，这里我们将就组件化方案谈谈自己的思考。 URL Scheme Protocol Class Target Action URL Scheme 方案实现方式：","categories":[],"tags":[{"name":"架构","slug":"架构","permalink":"https://caohanchao.github.io/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"iOS 音频入门之AVAudioSession","date":"2022-02-18T15:57:16.000Z","path":"2022/02/18/iOS-AVAudioSession/","permalink":"https://caohanchao.github.io/2022/02/18/iOS-AVAudioSession/","excerpt":"AVAudioSessionAVAudioSession是苹果用来管理App对音频硬件（I &#x2F; O）的资源使用；比如说： 设置APP与其他APP是否混音，或者中断、降低其他App声音 手机静音下，APP是否可以播放声音 指定音频输入或者输出设备 是否支持APP录制，是否可以边录制边播放 声音中断的优先级（电话接入中断APP音频处理） 在APP的运行过程中，AudioSession的配置影响所有的音频活动。你可以查询Audio Session来发现设备的硬件特性。如声道数（channel count）、采样率（sample rate）、和音频输入的可用性（availability of audio unit） AVAudioSession 激活","categories":[],"tags":[{"name":"音视频","slug":"音视频","permalink":"https://caohanchao.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"}]},{"title":"Hello World","date":"2022-02-17T16:19:41.741Z","path":"2022/02/18/hello-world/","permalink":"https://caohanchao.github.io/2022/02/18/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"原理篇","slug":"原理篇","permalink":"https://caohanchao.github.io/tags/%E5%8E%9F%E7%90%86%E7%AF%87/"},{"name":"Objective-C","slug":"Objective-C","permalink":"https://caohanchao.github.io/tags/Objective-C/"},{"name":"CocoaPods","slug":"CocoaPods","permalink":"https://caohanchao.github.io/tags/CocoaPods/"},{"name":"架构","slug":"架构","permalink":"https://caohanchao.github.io/tags/%E6%9E%B6%E6%9E%84/"},{"name":"音视频","slug":"音视频","permalink":"https://caohanchao.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"}]}